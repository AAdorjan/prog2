class SpecialElementOfList:
    def __init__(self,ls):
        self.list=ls
        self.__lenght=len(ls)

    def getSumZeroSubLists(self):
        resl=[] #result
        tmpls=[]
        for i in range(0,self.__lenght):
            for j in range(i+1,self.__lenght):
                for k in range(j+1,self.__lenght):
                    tmpls.append(self.list[i])
                    tmpls.append(self.list[j])
                    tmpls.append(self.list[k])
                    if sum(tmpls)==0:
                        resl.append(tmpls)
                    tmpls=[]
        return resl

    def __str__(self):
        return 'A lista {} es a hossza {}'.format(self.list,self.__lenght)

list1=SpecialElementOfList([-25,-10,-7,-3,2,4,8,10])
print(list1.list)
print(list1.getSumZeroSubLists())

list1.list.append(-15)
print(list1.list)

print(list1)



class Triangle:
    def __init__(self,p1,p2,p3=0):
        if p3==0:
            self.a=p1
            self.h=p2
        else:
            self.a=p1
            self.b=p2
            self.c=p3
    def area(self):
        if hasattr(self,'c'):
            s=(self.a+self.h+self.c)/2
            area=(s*(s-self.a)*(s-self.b)*(s-self.c))**0.5
            return area
        else:
            return self.a*self.h/2

    def perimeter(self):
        if hasattr(self,'c'):
            return self.a+self.b+self.c
        else:
            return 'Nem lehet kiszamolni'

    def __str__(self):
        if hasattr(self,'c'):
            return 'A haromszog oldalainak hossza: ({},{},{})'.format(self.a,self.b,self.c)
        else:
            return 'A haromszog egyik oldala: {} es a hozza tartozo magassag: {}'.format(self.a,self.h)

    def __add__(self, other):
        if isinstance(other,Triangle):
            return self.area()+other.area()
        if isinstance(other,int):
            return self.area()+other

    def __radd__(self, other):
        return self.__add__(other)

    def __sub__(self, other):
        if isinstance(other,Triangle):
            return self.area()-other.area()
        if isinstance(other,int):
            return self.area()-other

    def __eq__(self, other):
        if isinstance(other,Triangle):
            return self.area()==other.area()

    def __ne__(self, other):
        return self.area() !=other.area()

    def __gt__(self, other): #gt sima nagyobb ge nagyobb egyenlo
        return self.area()>other.area()

    def __le__(self, other):
        return self.area()<=other.area()

T1=Triangle(3,4,5)
T2=Triangle(4,4)

print(T1)
print(T2)

#print(T1+5)
#print(T1+T2)
#print(T1<=T2)
#print(T1==T2)
#print(T1!=T2)


class Vector:
    origoX=0
    origoY=0
    def __init__(self,x,y):
        self.x=x
        self.y=y
    def __str__(self):
        return '<{},{}>'.format(self.x,self.y)

    def __abs__(self):
        return (self.x**2 + self.y**2)**0.5

    def __add__(self, other):
        if isinstance(other,Vector):
            x=self.x+other.x
            y = self.y + other.y
        if isinstance(other,float):
            x = self.x + other
            y = self.y + other

        return self.__class__(x,y)

    def __iadd__(self, other):
        if isinstance(other,Vector):
            x=self.x+other.x
            y = self.y + other.y
        if isinstance(other,float):
            x = self.x + other
            y = self.y + other
        self.x=x
        self.y=y

        return self

    def __sub__(self, other):
        if isinstance(other, Vector):
            x = self.x - other.x
            y = self.y - other.y
        if isinstance(other, float):
            x = self.x - other
            y = self.y - other

        return self.__class__(x, y)

    def __rsub__(self, other):
        return self.__sub__(other)

    def __mul__(self, other):
        if isinstance(other,Vector):
            return self.x*other.x+self.y*other.y
        if isinstance(other,float):
            x=self.x*other
            y=self.y*other

        return self.__class__(x,y)

    def __rmul__(self, other):
        return self.__mul__(other)

    def __eq__(self, other):
        return self.__abs__()==other.__abs__()

    def __ne__(self, other):
        return self.__abs__() != other.__abs__()

    def __gt__(self, other):
        return self.__abs__() > other.__abs__()

    def __le__(self, other):
        return self.__abs__() <= other.__abs__()


lel=Vector(1,2)
lol=Vector(3,4)
oss=lel+lol
print(lel)
print(lol)
print(oss)
oss+=oss
print(oss)

print(lel*lol)
print(lol.__abs__())
print(abs(lol))
print(lol==5)
print(oss!=lol)
